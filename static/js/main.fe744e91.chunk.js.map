{"version":3,"sources":["components/CheckBox.tsx","components/Graph.tsx","constants/constants.tsx","transformers/apiTransformer.tsx","controllers/apiController.tsx","pages/HomePage.tsx","index.tsx"],"names":["CheckBox","prefecture","getPref","prefCode","prefName","className","type","id","name","onClick","htmlFor","Graph","prefInfos","pointStart","pointEnd","xAxisRange","series","map","prefInfo","years","data","values","options","chart","title","text","yAxis","xAxis","categories","accessibility","rangeDescription","legend","layout","align","verticalAlign","plotOptions","label","connectorAllowed","responsive","rules","condition","maxWidth","chartOptions","highcharts","Highcharts","URI_OPTION","process","transformPopuRes","catInfo","forEach","push","value","year","getAllPrefectures","fetch","res","json","ok","message","status","Error","result","getPrefPopulation","uri","popuData","HomePage","useState","prefectures","setprefectures","prefCodes","setPrefCodes","setPrefInfos","isLoading","setIsLoading","useMemo","length","prefInforRes","find","Promise","all","then","pref","code","tempCode","filter","style","background","textAlign","margin","fontWeight","router","createBrowserRouter","path","element","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.fe744e91.chunk.js","sourcesContent":["import React from \"react\";\nimport { PrefInfo } from \"../constants\";\n\ninterface props {\n  prefecture: PrefInfo\n  getPref: (prefCode: number) => void\n}\n\nconst CheckBox = ({ prefecture, getPref }: props) => {\n  const { prefCode, prefName } = prefecture\n\n  return(\n    <div className='checkbox'>\n      <input type=\"checkbox\" id={prefName} name={prefName}\n        onClick={() => getPref(prefCode)}\n      />\n      <label htmlFor={prefName}>{prefName}</label>\n    </div>\n  )\n}\n\nexport default CheckBox;\n","import React from \"react\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Highcharts from \"highcharts\";\nimport { graphData } from \"../pages/HomePage\";\n\ninterface props {\n  prefInfos: graphData[]\n}\n\nconst Graph = ({ prefInfos }: props) => {\n  let pointStart: number = 0\n  let pointEnd: number = 0\n  let xAxisRange: number[] = []\n\n  const series = prefInfos.map((prefInfo) => {\n    pointStart = prefInfo.years[0];\n    pointEnd = prefInfo.years[-1];\n    xAxisRange = prefInfo.years;\n    return ({\n      name: prefInfo.prefName,\n      data: prefInfo.values\n    })\n  })\n\n  const options = {\n    chart: {\n      type: 'spline'\n    },\n    title: {\n      text: ''\n    },\n    yAxis: {\n      title: {\n        text: '人口数'\n      }\n    },\n    xAxis: {\n      title: {\n        text: '年度'\n      },\n      categories: xAxisRange,\n      accessibility: {\n        rangeDescription: `Range: ${pointStart} to ${pointEnd}`\n      },\n    },\n    legend: {\n      layout: 'vertical',\n      align: 'right',\n      verticalAlign: 'middle'\n    },\n    plotOptions: {\n      series: {\n        label: {\n          connectorAllowed: false\n        }\n      }\n    },\n    series,\n    responsive: {\n      rules: [{\n        condition: {\n          maxWidth: 500\n        },\n        chartOptions: {\n          legend: {\n            layout: 'horizontal',\n            align: 'center',\n            verticalAlign: 'bottom'\n          }\n        }\n      }]\n    }\n  }\n\n  return (\n    <HighchartsReact highcharts={Highcharts} options={options} />\n  )\n}\n\nexport default Graph;\n","export const API_URI_ALL_PREF = 'https://opendata.resas-portal.go.jp/api/v1/prefectures'\n\nexport const API_URI_POPULATION = 'https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode='\n\nexport const API_KEY = process.env.REACT_APP_RESAS_API_KEY;\n\nexport const URI_OPTION = {\n  'method': 'GET',\n  'headers': {\n    'X-API-KEY': API_KEY!\n  }\n}\n","import { CatInfo } from \"../constants\"\n\nexport const transformPopuRes = (catInfo: CatInfo) => {\n  const { data } = catInfo;\n  const values: number[] = [];\n  const years: number[] = [];\n\n  data.forEach((catInfo) => {\n    values.push(catInfo.value);\n    years.push(catInfo.year);\n  })\n\n  return {\n    values,\n    years\n  };\n}\n","import { API_URI_ALL_PREF, API_URI_POPULATION, URI_OPTION } from \"../constants\"\nimport { AllPrefRes, PrefPopuRes } from \"../constants/apiModal\";\nimport { transformPopuRes } from \"../transformers/apiTransformer\";\n\nexport const getAllPrefectures = async () => {\n  let res = await fetch(API_URI_ALL_PREF, URI_OPTION);\n\n  let data: AllPrefRes = await res.json();\n\n  if (!res.ok) {\n    const message = `都道府県情報が取りません: ${res.status}`;\n    throw new Error(message);\n  }\n\n  return { data: data.result };\n}\n\nexport const getPrefPopulation = async (prefCode: number) => {\n  const uri = `${API_URI_POPULATION}${prefCode}`;\n\n  let res = await fetch(uri, URI_OPTION);\n\n  let data: PrefPopuRes = await res.json();\n  if (!res.ok) {\n    const message = `府県情報が取りません: ${res.status}`;\n    throw new Error(message);\n  }\n  const popuData = transformPopuRes(data.result?.data[0]!)\n\n  return { ...popuData, prefCode }\n}\n","import React, { useMemo, useState } from 'react';\nimport '../stylesheets/homepage.css';\nimport CheckBox from '../components/CheckBox';\nimport Graph from '../components/Graph';\nimport { getAllPrefectures, getPrefPopulation } from '../controllers/apiController';\nimport { PrefInfo } from '../constants/apiModal'\n\nexport interface graphData {\n  prefCode: number;\n  prefName: string;\n  values: number[];\n  years: number[];\n}\n\nconst HomePage = () => {\n  const [prefectures, setprefectures] = useState<PrefInfo[]>([]);\n  const [prefCodes, setPrefCodes] = useState<number[]>([]);\n  const [prefInfos, setPrefInfos] = useState<graphData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useMemo(() => {\n    setIsLoading(true);\n\n    if (prefCodes.length === 0) {\n      setPrefInfos([]);\n    } else {\n      const prefInforRes = prefCodes.map((prefCode) => {\n        const prefInfo = prefInfos.find((prefInfo) => (prefInfo.prefCode === prefCode));\n\n        if (!prefInfo) {\n          const data = getPrefPopulation(prefCode);\n          return data;\n        }\n\n        return prefInfo;\n      })\n\n      Promise.all(prefInforRes).then((prefInforRes) => {\n        const prefInfos = prefInforRes.map((prefInfo) => {\n          const prefName = prefectures.find((pref) => (pref.prefCode === prefInfo.prefCode))?.prefName!\n          return({\n            ...prefInfo,\n            prefName\n          })\n        });\n\n        setPrefInfos(prefInfos)\n        setIsLoading(false);\n      })\n    }\n  },[prefCodes])\n\n  useMemo(async () => {\n    setIsLoading(true);\n    const data = await getAllPrefectures();\n    setprefectures(data.data!)\n\n    setIsLoading(false);\n  },[])\n\n  const getPref = (prefCode: number) => {\n    const isPresent = prefCodes.find(code => code === prefCode);\n\n    if (isPresent) {\n      const tempCode = prefCodes.filter(code => code !== prefCode);\n\n      setPrefCodes(tempCode);\n    } else {\n      setPrefCodes([...prefCodes, prefCode]);\n    }\n  }\n\n  const renderCheckboxes = () => {\n    const checkboxes = prefectures.map((prefecture) => {\n      return (\n        <CheckBox\n          key={prefecture.prefName}\n          prefecture={prefecture}\n          getPref={getPref}\n        />\n      );\n    })\n    return checkboxes\n  }\n\n  return (\n    <main>\n      <div className={`overlay ${isLoading ? '': 'hidden'}`}>\n        <div className='spinner' />\n      </div>\n      <h1 style={{ background:'#7a7a7a', textAlign:'center', margin: 0, fontWeight: 'normal'}}>日本府県人口</h1>\n      <div className='container'>\n        <div className='content'>\n          <fieldset className='fieldset'>\n            <legend>都道府県</legend>\n            <div className='checkbox-grid'>\n              {prefectures && renderCheckboxes()}\n            </div>\n          </fieldset>\n          <div className='graph'>\n            <Graph\n              prefInfos={prefInfos}/>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './stylesheets/index.css';\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <HomePage />\n  },\n  {\n    path: \"/population-graph\",\n    element: <HomePage />\n  }\n])\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}